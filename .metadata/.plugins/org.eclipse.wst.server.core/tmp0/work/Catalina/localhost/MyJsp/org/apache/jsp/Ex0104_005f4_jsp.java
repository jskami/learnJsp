/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.56
 * Generated at: 2022-01-04 08:22:26 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class Ex0104_005f4_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<!-- Ex0104_3에서 넘어온 정보를 전송받아서 처리하자! -->\r\n");
      out.write("	");

		// 이름을 리턴받아-
		request.setCharacterEncoding("utf-8"); // 인코딩 방식 설정, 가장 위에서 작성해야 아래의 모든 코딩에도 영향을 미치니까.. rg?
		String sname = request.getParameter("sname"); //리퀘스트라는 객체가 따로 존재한다. 클라이언트로부터 넘어온 정보를 받는 객체로서, 이녀석을 사용하자
			// ↑여기 이름은 뭘 해도 상관없지만 알아보기 쉽게 sname이라고 동일하게 하자 / 위 문법은 '전송문자열 저장'이다.
		//out.print(sname + "<br>");
		
		// 나이를 리턴받아-
		String sage = request.getParameter("sage"); 
		//out.print(sage + "<br>");
		
		// 비밀번호를 리턴받아-
		String passwd = request.getParameter("passwd");
		//out.print(password + "<br>");
		
		// 지역을 리턴받아-
		String sarea = request.getParameter("sarea");
		//out.print(sarea + "<br>");
		
		// 연도를 리턴받아-
		String syear = request.getParameter("syear");
		//out.print(syear + "<br>");
		
		// 취미를 리턴받아-
		String shobby = request.getParameter("shobby");
		//out.print(shobby + "<br>");
		
		
		// sage를 정수형으로 변환시켜보자!  / + '예외처리'를 해보자!
		int iage = 0;  // 전역변수
		
		// 이름 입력 오류를 띄워보자
		boolean flag = true;  // 나이가 정상으로 넘어온다고 가정
		if (sname.trim().length() < 2) { // "   홍길  동     " 이런게 있다면 앞, 뒤에 공백을 제가한 순수 문자만 출력 !:ㄱ,ㄴ이런게 아니라 가,나,박,이,최 등등 조합된 한 글자를 말한다. -> 이게 trim메서드이다. 
			flag = false;		
		}
			//"====================여기까지 이름 입력 오류======================");
		int ipassword = 0;
		try {
			ipassword = Integer.parseInt(passwd);
		} catch (Exception e) {
			flag = false;
		}
			//"====================여기까지 비번 입력 오류======================");
		try {
			iage = Integer.parseInt(sage); // 정수형태의 문자열을 정수로 형변환 하는 방법! 진짜 중요 integer캐스팅 숙지할 것
		} catch (Exception e) { // 예외가 발생했을 경우 처리할 내용
			//iage = 25;  // 예외가 발생 안하면 37라인이 정상 작동, 예외 발생하면 39라인이 작동 rg? 디폴트 값으로 25를 준것-
			flag = false;  // 예외가 발생된 상황
		}
			//"====================여기까지 나이 입력 오류======================");
			
			//"====================여기부터 오류 메시지 띄우기======================");
		if (flag == false) {  // 예외가 발생했을 경우

      out.write(" <!-- 이것은 스크립트 문법을 분리 시키기 위함이다.  -->\r\n");
      out.write("			<script>\r\n");
      out.write("				alert(\"입력 오류 발생\");\r\n");
      out.write("				history.back();  // 이전 페이지로 이동\r\n");
      out.write("			</script>\r\n");
	
		} else {  // 정상일 경우	
			//out.print(iage + "<br>");
			out.print(sname + "<br>");
			out.print(sage + "<br>");
			out.print(passwd + "<br>");
			out.print(sarea + "<br>");
			out.print(syear + "<br>");
			out.print(shobby + "<br>");
		}
		// ↑ 이 처럼 사용자가 나이 입력란에 문자를 입력할 수 있는 예외가 발생할 수 있으니까 개발자는 다양한 변수를 생각하고 예외를 처리할 수 있도록 꼼꼼하게, 신중하게 코딩해야 할 것이다.
	
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
